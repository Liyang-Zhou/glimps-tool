[
  {
    "old_path": "packages/api/src/migrations/1612733696525-AddProfileColumnToUser.ts",
    "new_path": "packages/api/src/migrations/1612733696525-AddProfileColumnToUser.ts",
    "a_mode": "0",
    "b_mode": "100644",
    "new_file": true,
    "renamed_file": false,
    "deleted_file": false,
    "diff": "@@ -0,0 +1,13 @@\n+import { MigrationInterface, QueryRunner } from 'typeorm';\n+\n+export class AddProfileColumnToUser1612733696525 implements MigrationInterface {\n+  name = 'AddProfileColumnToUser1612733696525';\n+\n+  public async up(queryRunner: QueryRunner): Promise<void> {\n+    await queryRunner.query(`ALTER TABLE \"user_profile\" ADD \"profile\" jsonb`);\n+  }\n+\n+  public async down(queryRunner: QueryRunner): Promise<void> {\n+    await queryRunner.query(`ALTER TABLE \"user_profile\" DROP COLUMN \"profile\"`);\n+  }\n+}\n",
    "hunks": [
      {
        "oldStart": 1,
        "oldLines": 0,
        "newStart": 1,
        "newLines": 13,
        "lines": [
          "+import { MigrationInterface, QueryRunner } from 'typeorm';",
          "+",
          "+export class AddProfileColumnToUser1612733696525 implements MigrationInterface {",
          "+  name = 'AddProfileColumnToUser1612733696525';",
          "+",
          "+  public async up(queryRunner: QueryRunner): Promise<void> {",
          "+    await queryRunner.query(`ALTER TABLE \"user_profile\" ADD \"profile\" jsonb`);",
          "+  }",
          "+",
          "+  public async down(queryRunner: QueryRunner): Promise<void> {",
          "+    await queryRunner.query(`ALTER TABLE \"user_profile\" DROP COLUMN \"profile\"`);",
          "+  }",
          "+}"
        ],
        "linedelimiters": [
          "\n",
          "\n",
          "\n",
          "\n",
          "\n",
          "\n",
          "\n",
          "\n",
          "\n",
          "\n",
          "\n",
          "\n",
          "\n"
        ]
      }
    ]
  },
  {
    "old_path": "packages/api/src/user/entities/user.entity.ts",
    "new_path": "packages/api/src/user/entities/user.entity.ts",
    "a_mode": "100644",
    "b_mode": "100644",
    "new_file": false,
    "renamed_file": false,
    "deleted_file": false,
    "diff": "@@ -1,3 +1,4 @@\n+import { Profile } from '@ceres/types';\n import { Column, Entity, OneToMany, PrimaryGeneratedColumn } from 'typeorm';\n import { Repository } from '../../gitlab/repository/repository.entity';\n \n@@ -17,6 +18,9 @@ export class User {\n   @Column('jsonb')\n   auth: Auth;\n \n+  @Column({ type: 'jsonb', nullable: true })\n+  profile?: Profile;\n+\n   @OneToMany(() => Repository, (repository) => repository.user)\n   repositories: Repository[];\n }\n",
    "hunks": [
      {
        "oldStart": 1,
        "oldLines": 3,
        "newStart": 1,
        "newLines": 4,
        "lines": [
          "+import { Profile } from '@ceres/types';",
          " import { Column, Entity, OneToMany, PrimaryGeneratedColumn } from 'typeorm';",
          " import { Repository } from '../../gitlab/repository/repository.entity';",
          " "
        ],
        "linedelimiters": ["\n", "\n", "\n", "\n"]
      },
      {
        "oldStart": 17,
        "oldLines": 6,
        "newStart": 18,
        "newLines": 9,
        "lines": [
          "   @Column('jsonb')",
          "   auth: Auth;",
          " ",
          "+  @Column({ type: 'jsonb', nullable: true })",
          "+  profile?: Profile;",
          "+",
          "   @OneToMany(() => Repository, (repository) => repository.user)",
          "   repositories: Repository[];",
          " }"
        ],
        "linedelimiters": ["\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n"]
      }
    ]
  },
  {
    "old_path": "packages/api/src/user/services/user.service.ts",
    "new_path": "packages/api/src/user/services/user.service.ts",
    "a_mode": "100644",
    "b_mode": "100644",
    "new_file": false,
    "renamed_file": false,
    "deleted_file": false,
    "diff": "@@ -1,4 +1,5 @@\n-import { Injectable } from '@nestjs/common';\n+import { Profile } from '@ceres/types';\n+import { HttpService, Injectable } from '@nestjs/common';\n import { InjectRepository } from '@nestjs/typeorm';\n import { Repository } from 'typeorm';\n import { User } from '../entities/user.entity';\n@@ -8,6 +9,7 @@ export class UserService {\n   constructor(\n     @InjectRepository(User)\n     private readonly userRepository: Repository<User>,\n+    private readonly httpService: HttpService,\n   ) {}\n \n   async createSfuUser(sfuId: string) {\n@@ -41,4 +43,16 @@ export class UserService {\n       sfuId: user.auth.userId,\n     };\n   }\n+\n+  async updateWithGitlab(user: User, token: string) {\n+    const axiosResponse = await this.httpService\n+      .get<Profile>('/user', {\n+        headers: {\n+          'PRIVATE-TOKEN': token,\n+        },\n+      })\n+      .toPromise();\n+    user.profile = axiosResponse.data;\n+    return this.userRepository.save(user);\n+  }\n }\n",
    "hunks": [
      {
        "oldStart": 1,
        "oldLines": 4,
        "newStart": 1,
        "newLines": 5,
        "lines": [
          "-import { Injectable } from '@nestjs/common';",
          "+import { Profile } from '@ceres/types';",
          "+import { HttpService, Injectable } from '@nestjs/common';",
          " import { InjectRepository } from '@nestjs/typeorm';",
          " import { Repository } from 'typeorm';",
          " import { User } from '../entities/user.entity';"
        ],
        "linedelimiters": ["\n", "\n", "\n", "\n", "\n", "\n"]
      },
      {
        "oldStart": 8,
        "oldLines": 6,
        "newStart": 9,
        "newLines": 7,
        "lines": [
          "   constructor(",
          "     @InjectRepository(User)",
          "     private readonly userRepository: Repository<User>,",
          "+    private readonly httpService: HttpService,",
          "   ) {}",
          " ",
          "   async createSfuUser(sfuId: string) {"
        ],
        "linedelimiters": ["\n", "\n", "\n", "\n", "\n", "\n", "\n"]
      },
      {
        "oldStart": 41,
        "oldLines": 4,
        "newStart": 43,
        "newLines": 16,
        "lines": [
          "       sfuId: user.auth.userId,",
          "     };",
          "   }",
          "+",
          "+  async updateWithGitlab(user: User, token: string) {",
          "+    const axiosResponse = await this.httpService",
          "+      .get<Profile>('/user', {",
          "+        headers: {",
          "+          'PRIVATE-TOKEN': token,",
          "+        },",
          "+      })",
          "+      .toPromise();",
          "+    user.profile = axiosResponse.data;",
          "+    return this.userRepository.save(user);",
          "+  }",
          " }"
        ],
        "linedelimiters": [
          "\n",
          "\n",
          "\n",
          "\n",
          "\n",
          "\n",
          "\n",
          "\n",
          "\n",
          "\n",
          "\n",
          "\n",
          "\n",
          "\n",
          "\n",
          "\n"
        ]
      }
    ]
  },
  {
    "old_path": "packages/api/src/user/user.controller.ts",
    "new_path": "packages/api/src/user/user.controller.ts",
    "a_mode": "100644",
    "b_mode": "100644",
    "new_file": false,
    "renamed_file": false,
    "deleted_file": false,
    "diff": "@@ -1,5 +1,8 @@\n-import { Controller, Get, Req, UseGuards } from '@nestjs/common';\n+import { Controller, Get, Post, Req, UseGuards } from '@nestjs/common';\n+import { Auth } from '../auth/decorators/auth.decorator';\n+import { GitlabToken } from '../auth/decorators/gitlab-token.decorator';\n import { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';\n+import { VerifiedUser } from '../auth/types/VerifiedUser';\n import { UserService } from './services/user.service';\n \n @Controller('user')\n@@ -11,4 +14,9 @@ export class UserController {\n     const userId: string = req.user.sub;\n     return this.userService.getProfileById(userId);\n   }\n+\n+  @Post('update')\n+  updateProfile(@Auth() verifiedUser: VerifiedUser, @GitlabToken() token) {\n+    return this.userService.updateWithGitlab(verifiedUser.user, token);\n+  }\n }\n",
    "hunks": [
      {
        "oldStart": 1,
        "oldLines": 5,
        "newStart": 1,
        "newLines": 8,
        "lines": [
          "-import { Controller, Get, Req, UseGuards } from '@nestjs/common';",
          "+import { Controller, Get, Post, Req, UseGuards } from '@nestjs/common';",
          "+import { Auth } from '../auth/decorators/auth.decorator';",
          "+import { GitlabToken } from '../auth/decorators/gitlab-token.decorator';",
          " import { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';",
          "+import { VerifiedUser } from '../auth/types/VerifiedUser';",
          " import { UserService } from './services/user.service';",
          " ",
          " @Controller('user')"
        ],
        "linedelimiters": ["\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n"]
      },
      {
        "oldStart": 11,
        "oldLines": 4,
        "newStart": 14,
        "newLines": 9,
        "lines": [
          "     const userId: string = req.user.sub;",
          "     return this.userService.getProfileById(userId);",
          "   }",
          "+",
          "+  @Post('update')",
          "+  updateProfile(@Auth() verifiedUser: VerifiedUser, @GitlabToken() token) {",
          "+    return this.userService.updateWithGitlab(verifiedUser.user, token);",
          "+  }",
          " }"
        ],
        "linedelimiters": ["\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n"]
      }
    ]
  },
  {
    "old_path": "packages/api/src/user/user.module.ts",
    "new_path": "packages/api/src/user/user.module.ts",
    "a_mode": "100644",
    "b_mode": "100644",
    "new_file": false,
    "renamed_file": false,
    "deleted_file": false,
    "diff": "@@ -1,11 +1,12 @@\n import { Module } from '@nestjs/common';\n import { TypeOrmModule } from '@nestjs/typeorm';\n+import { ApiModule } from '../gitlab/api/api.module';\n import { User } from './entities/user.entity';\n import { UserService } from './services/user.service';\n import { UserController } from './user.controller';\n \n @Module({\n-  imports: [TypeOrmModule.forFeature([User])],\n+  imports: [TypeOrmModule.forFeature([User]), ApiModule],\n   controllers: [UserController],\n   exports: [UserService],\n   providers: [UserService],\n",
    "hunks": [
      {
        "oldStart": 1,
        "oldLines": 11,
        "newStart": 1,
        "newLines": 12,
        "lines": [
          " import { Module } from '@nestjs/common';",
          " import { TypeOrmModule } from '@nestjs/typeorm';",
          "+import { ApiModule } from '../gitlab/api/api.module';",
          " import { User } from './entities/user.entity';",
          " import { UserService } from './services/user.service';",
          " import { UserController } from './user.controller';",
          " ",
          " @Module({",
          "-  imports: [TypeOrmModule.forFeature([User])],",
          "+  imports: [TypeOrmModule.forFeature([User]), ApiModule],",
          "   controllers: [UserController],",
          "   exports: [UserService],",
          "   providers: [UserService],"
        ],
        "linedelimiters": [
          "\n",
          "\n",
          "\n",
          "\n",
          "\n",
          "\n",
          "\n",
          "\n",
          "\n",
          "\n",
          "\n",
          "\n",
          "\n"
        ]
      }
    ]
  },
  {
    "old_path": "packages/types/src/Profile.ts",
    "new_path": "packages/types/src/Profile.ts",
    "a_mode": "0",
    "b_mode": "100644",
    "new_file": true,
    "renamed_file": false,
    "deleted_file": false,
    "diff": "@@ -0,0 +1,38 @@\n+// Generated with: http://json2ts.com/\n+interface Identity {\n+  provider: string;\n+  extern_uid: string;\n+}\n+\n+export interface Profile {\n+  id: number;\n+  username: string;\n+  email: string;\n+  name: string;\n+  state: string;\n+  avatar_url: string;\n+  web_url: string;\n+  created_at: Date;\n+  bio: string;\n+  bio_html: string;\n+  location?: any;\n+  public_email: string;\n+  skype: string;\n+  linkedin: string;\n+  twitter: string;\n+  website_url: string;\n+  organization: string;\n+  last_sign_in_at: Date;\n+  confirmed_at: Date;\n+  theme_id: number;\n+  last_activity_on: string;\n+  color_scheme_id: number;\n+  projects_limit: number;\n+  current_sign_in_at: Date;\n+  identities: Identity[];\n+  can_create_group: boolean;\n+  can_create_project: boolean;\n+  two_factor_enabled: boolean;\n+  external: boolean;\n+  private_profile: boolean;\n+}\n",
    "hunks": [
      {
        "oldStart": 1,
        "oldLines": 0,
        "newStart": 1,
        "newLines": 38,
        "lines": [
          "+// Generated with: http://json2ts.com/",
          "+interface Identity {",
          "+  provider: string;",
          "+  extern_uid: string;",
          "+}",
          "+",
          "+export interface Profile {",
          "+  id: number;",
          "+  username: string;",
          "+  email: string;",
          "+  name: string;",
          "+  state: string;",
          "+  avatar_url: string;",
          "+  web_url: string;",
          "+  created_at: Date;",
          "+  bio: string;",
          "+  bio_html: string;",
          "+  location?: any;",
          "+  public_email: string;",
          "+  skype: string;",
          "+  linkedin: string;",
          "+  twitter: string;",
          "+  website_url: string;",
          "+  organization: string;",
          "+  last_sign_in_at: Date;",
          "+  confirmed_at: Date;",
          "+  theme_id: number;",
          "+  last_activity_on: string;",
          "+  color_scheme_id: number;",
          "+  projects_limit: number;",
          "+  current_sign_in_at: Date;",
          "+  identities: Identity[];",
          "+  can_create_group: boolean;",
          "+  can_create_project: boolean;",
          "+  two_factor_enabled: boolean;",
          "+  external: boolean;",
          "+  private_profile: boolean;",
          "+}"
        ],
        "linedelimiters": [
          "\n",
          "\n",
          "\n",
          "\n",
          "\n",
          "\n",
          "\n",
          "\n",
          "\n",
          "\n",
          "\n",
          "\n",
          "\n",
          "\n",
          "\n",
          "\n",
          "\n",
          "\n",
          "\n",
          "\n",
          "\n",
          "\n",
          "\n",
          "\n",
          "\n",
          "\n",
          "\n",
          "\n",
          "\n",
          "\n",
          "\n",
          "\n",
          "\n",
          "\n",
          "\n",
          "\n",
          "\n",
          "\n"
        ]
      }
    ]
  },
  {
    "old_path": "packages/types/src/index.ts",
    "new_path": "packages/types/src/index.ts",
    "a_mode": "100644",
    "b_mode": "100644",
    "new_file": false,
    "renamed_file": false,
    "deleted_file": false,
    "diff": "@@ -1 +1,2 @@\n-export * from './Repository';\n\\ No newline at end of file\n+export * from './Repository';\n+export * from './Profile';\n",
    "hunks": [
      {
        "oldStart": 1,
        "oldLines": 1,
        "newStart": 1,
        "newLines": 2,
        "lines": [
          "-export * from './Repository';",
          "\\ No newline at end of file",
          "+export * from './Repository';",
          "+export * from './Profile';"
        ],
        "linedelimiters": ["\n", "\n", "\n", "\n"]
      }
    ]
  }
]
